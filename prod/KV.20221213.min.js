/******
 * This helper class is designed to simplify init of Web3 Wallet connections
 * for vanilla JS implementations.
 *
 * The problem being solved is that every wallet has a slightly different init
 * process, and slightly different mechanism to determine if the wallet is
 * present in the user's browser.
 *
 * The solution provides for a standardised way to query for wallet presence,
 * and connection init, returning an initialised Web3.js wallet object.
 *
 * Currently supports WalletConnect, MetaMask, Binance Wallet, Coinbase Wallet
 * or simply reading chain information via Infura.
 *
 * Depends on Web3.js and WalletConnect JS files - however these are
 * imported through the init function.
 *
 * Copyright (c) 2022 Kaiesh Vohra
 * License: GPL
 *******/
var ajax=ajax||function(a,c){var b="",d;for(d in a)a.hasOwnProperty(d)&&(b+=(""==b?"":"&")+d+"="+encodeURIComponent(a[d]));var e={api_url:"/api/",request_header:"application/x-www-form-urlencoded",json_return:!0,method:"POST"};if("object"==typeof c)for(d in c)c.hasOwnProperty(d)&&(e[d]=c[d]);return new Promise(function(f,g){var h=new XMLHttpRequest;h.open(e.method,e.api_url);h.setRequestHeader("Content-Type",e.request_header);h.onload=function(){if(200===h.status){var k=e.json_return?JSON.parse(h.responseText):
h.responseText;f(k)}else g({status:"fail",resp:k})};h.send(b)})},shield=shield||function(a,c,b,d,e,f){d=document.createElement(d);d.src=a;"function"==typeof c&&(d.onload=c);d.async="async";document.getElementsByTagName(b)[e].appendChild(d)},showToast=function(a,c){var b=document.getElementsByClassName("toast"),d;0<b.length&&(d=b[b.length-1].offsetTop+b[b.length-1].offsetHeight+25+"px");b=Math.floor(1E3*Math.random());var e=document.createElement("DIV");e.id="toast"+b;e.innerHTML=a;e.className="toast "+
c;d&&(e.style.top=d);document.getElementsByTagName("body")[0].appendChild(e);e.addEventListener("mouseover",function(){e.classList.add("animpaused")});e.addEventListener("mouseout",function(){e.classList.remove("animpaused")});e.addEventListener("animationend",function(f){"slide-in"==f.animationName&&e.parentElement.removeChild(e)})},KV=KV||{_infuraID:null,_provider_name:localStorage.getItem("provider_name")?localStorage.getItem("provider_name"):"readonly",rpc_url:{1:null,3:null,5:null,42:null,56:"https://bsc-dataseed.binance.org/",
97:"https://data-seed-prebsc-1-s1.binance.org:8545/",137:null,80001:null},rpc_codes:{ETH_MAINNET:1,ETH_ROPSTEN:3,ETH_GORLI:5,ETH_KOVAN:42,BSC_MAINNET:56,BSC_TESTNET:97,MATIC_MAINNET:137,MATIC_MUMBAI:80001},network_humannames:{1:"Ethereum Mainnet",3:"Ethereum Ropsten",5:"Ethereum Goerli",42:"Ethereum Kovan",56:"Binance Smart Chain",97:"Binance Smart Chain Test",137:"Polygon Mainnet",80001:"Polygon Mumbai Testnet"},block_explorers:{1:"https://etherscan.io",3:"https://ropsten.etherscan.io",5:"https://goerli.etherscan.io",
42:"https://kovan.etherscan.io",56:"https://bscscan.com",97:"https://testnet.bscscan.com",137:"https://polygonscan.com",80001:"https://mumbai.polygonscan.com"},native_rpcs:{1:"https://mainnet.infura.io/v3/",3:"https://ropsten.infura.io/v3/",4:"https://rinkeby.infura.io/v3/",5:"https://goerli.infura.io/v3/",42:"https://kovan.infura.io/v3/",56:"https://bsc-dataseed.binance.org/",97:"https://data-seed-prebsc-1-s1.binance.org:8545",137:"https://polygon-rpc.com",80001:"https://rpc-mumbai.maticvigil.com"},
network_currency:{1:{name:"Ethereum",symbol:"ETH",decimals:18},3:{name:"Ethereum",symbol:"ETH",decimals:18},5:{name:"Ethereum",symbol:"ETH",decimals:18},42:{name:"Ethereum",symbol:"ETH",decimals:18},56:{name:"BNB",symbol:"BNB",decimals:8},97:{name:"tBNB",symbol:"tBNB",decimals:8},137:{name:"MATIC",symbol:"MATIC",decimals:18},80001:{name:"MATIC",symbol:"MATIC",decimals:18}}};
KV.init=function(a,c){return KV._init_complete?new Promise(function(b){b()}):new Promise(function(b,d){try{var e=0,f=["https://cdn.kaiesh.com/js/web3_3.0.0-rc.5.min.js","https://cdn.kaiesh.com/js/walletconnect_1.7.1.min.js"];if("string"==typeof c)for(var g=0;g<f.length;g++)f[g]=f[g].replace("https://cdn.kaiesh.com/",c);var h=Array.isArray(a)?"boolean"==typeof c&&c?a:f.concat(a):f;f=function(){e++;e>=h.length&&(KV._init_complete=!0,localStorage.getItem("chainId")&&localStorage.getItem("provider_name")?
(KV._provider_name=localStorage.getItem("provider_name"),KV.wallet.enable(localStorage.getItem("chainId")).then(function(k){b({init:"ok",wallet:"ok"})})["catch"](function(k){b({init:"ok",wallet:"fail"})})):b({init:"ok"}))};for(g=0;g<h.length;g++)shield(h[g],f,"head","script",0)}catch(k){d(k)}})};
KV.set_infuraID=function(a){KV._infuraID=a;KV.rpc_url[1]="https://mainnet.infura.io/v3/"+a;KV.rpc_url[3]="https://ropsten.infura.io/v3/"+a;KV.rpc_url[5]="https://goerli.infura.io/v3/"+a;KV.rpc_url[42]="https://kovan.infura.io/v3/"+a;KV.rpc_url[137]="https://polygon-mainnet.infura.io/v3/"+a;KV.rpc_url[80001]="https://polygon-mumbai.infura.io/v3/"+a};
KV.get_available_providers=function(){var a=[];a.push("walletconnect");"object"==typeof window.ethereum&&window.ethereum.isMetaMask&&a.push("metamask");"object"==typeof window.BinanceChain&&a.push("binancewallet");return a};KV.set_provider=function(a){switch(a){case "metamask":case "walletconnect":case "binancewallet":case "readonly":KV._provider_name=a;localStorage.setItem("provider_name",a);break;default:throw Exception("Invalid provider specified");}};KV.get_provider=function(){return KV._provider_name};
KV.wallet={reset_all:function(){KV.wallet._hooks.disconnect=[];KV.wallet._hooks.connect=[];KV.wallet._hooks.session_change=[];localStorage.removeItem("chainId");localStorage.removeItem("provider");KV.wallet.walletconnect._provider=null;KV.wallet.walletconnect._web3=null;KV.wallet.metamask._provider=null;KV.wallet.metamask._web3=null;KV.wallet.binancewallet._provider=null;KV.wallet.binancewallet._web3=null;KV.wallet.coinbasewallet._provider=null;KV.wallet.coinbasewallet._web3=null;KV.wallet.readonly._provider=
null;KV.wallet.readonly._web3=null;KV._provider_name=null},on_disconnect:function(a){"function"==typeof a&&KV.wallet._hooks.disconnect.push(a)},on_session_change:function(a){"function"==typeof a&&KV.wallet._hooks.session_change.push(a)},on_connect:function(a){"function"==typeof a&&KV.wallet._hooks.connect.push(a)},_process_session_update:function(a){for(var c=0;c<KV.wallet._hooks.session_change.length;c++)"function"==typeof KV.wallet._hooks.session_change[c]?function(b){setTimeout(function(){b(a)},
10)}(KV.wallet._hooks.session_change[c]):console.error("Session change hooks",KV.wallet._hooks.session_change[c],"This is not a function")},_process_disconnection:function(a){for(var c=0;c<KV.wallet._hooks.disconnect.length;c++)"function"==typeof KV.wallet._hooks.disconnect[c]?function(b){setTimeout(function(){b(a)},10)}(KV.wallet._hooks.disconnect[c]):console.error("Disconnection hooks",KV.wallet._hooks.disconnect[c],"This is not a function");KV.wallet.reset_all()},_process_connect:function(a){for(var c=
0;c<KV.wallet._hooks.connect.length;c++)"function"==typeof KV.wallet._hooks.connect[c]?function(b){setTimeout(function(){b(a)},10)}(KV.wallet._hooks.connect[c]):console.error("Disconnection hooks",KV.wallet._hooks.connect[c],"This is not a function")},_hooks:{disconnect:[],session_change:[],connect:[]},walletconnect:{enable:function(a){return new Promise(function(c,b){null==KV.rpc_url[a]?b({code:-1,debug:"Invalid RPC url for this network. You might need an Infura ID for Wallet Connect to work on this network.\n\nUse the function KV.set_infuraID(str) to set your Infura ID before invoking this method."}):
(KV.wallet.walletconnect._provider=new WalletConnectProvider["default"]({infuraId:KV._infuraID,rpc:KV.rpc_url,chainId:a}),KV.wallet.walletconnect._provider.chainId=a,KV.wallet.walletconnect._provider.enable().then(function(d){KV.wallet.walletconnect._web3=new Web3(KV.wallet.walletconnect._provider);localStorage.setItem("chainId",a);KV.wallet.walletconnect._provider.on("disconnect",KV.wallet._process_disconnection);KV.wallet.walletconnect._provider.on("session_update",KV.wallet._process_session_update);
KV.wallet._process_connect(d);c(d)})["catch"](function(d){b(d)}))})}},binancewallet:{enable:function(a){return new Promise(function(c,b){"object"!=typeof window.BinanceChain&&b({code:-1,debug:"Binance Chain wallet not found. Please query available providers before invoking."});KV.wallet.binancewallet._provider=window.BinanceChain;1==a&&"0x01"!=window.BinanceChain.chainId&&window.BinanceChain.chainId!="0x"+Number(a).toString(16)?b({code:4901,target_network:"0x"+Number(a).toString(16),actual_network:window.BinanceChain.chainId}):
KV.wallet.binancewallet._provider.enable().then(function(d){KV.wallet.binancewallet._web3=new Web3(window.BinanceChain);localStorage.setItem("chainId",a);KV.wallet.binancewallet._provider.on("disconnect",KV.wallet._process_disconnection);KV.wallet.binancewallet._provider.on("accountsChanged",KV.wallet._process_session_update);KV.wallet._process_connect(d);c(d)})["catch"](function(d){b(d)})})}},coinbasewallet:{enable:function(a){return new Promise(function(c,b){if("object"==typeof window.ethereum&&
Array.isArray(window.ethereum.providers)){for(var d=0;d<window.ethereum.providers.length;d++)if(window.ethereum.providers[d].isCoinbaseWallet){KV.wallet.coinbasewallet._provider=window.ethereum.providers[d];break}KV.wallet.coinbasewallet._provider.request({method:"wallet_addEthereumChain",params:[{chainId:"0x"+Number(a).toString(16),blockExplorerUrls:[KV.block_explorers[a]],chainName:KV.network_humannames[a],nativeCurrency:KV.network_currency[a],rpcUrls:[KV.native_rpcs[a]]}]}).then(function(e){console.log(e);
KV.wallet.coinbasewallet._provider.enable().then(function(f){console.log(f);KV.wallet.coinbasewallet._web3=new Web3(KV.wallet.coinbasewallet._provider);localStorage.setItem("chainId",a);KV.wallet.coinbasewallet._provider.on("disconnect",KV.wallet._process_disconnection);KV.wallet.coinbasewallet._provider.on("accountsChanged",KV.wallet._process_session_update);KV.wallet._process_connect(f);c(f)})["catch"](function(f){b(f)})})["catch"](function(e){b(e)})}else b({code:-1,debug:"Wallet provider not available"})})}},
metamask:{enable:function(a){return new Promise(function(c,b){if(window.ethereum){if(Array.isArray(window.ethereum.providers))for(var d=0;d<window.ethereum.providers.length;d++){if(window.ethereum.providers[d].isMetaMask){var e=window.ethereum.providers[d];break}}else e=window.ethereum;KV.wallet.metamask._provider=e;var f=1!=a?{method:"wallet_addEthereumChain",params:[{chainId:"0x"+Number(a).toString(16),blockExplorerUrls:[KV.block_explorers[a]],chainName:KV.network_humannames[a],nativeCurrency:KV.network_currency[a],
rpcUrls:[KV.native_rpcs[a]]}]}:{method:"wallet_switchEthereumChain",params:[{chainId:"0x"+Number(a).toString(16)}]};var g=function(h){KV.wallet.metamask._provider.enable().then(function(k){KV.wallet.metamask._web3=new Web3(window.ethereum);localStorage.setItem("chainId",a);KV.wallet.metamask._provider.on("disconnect",KV.wallet._process_disconnection);KV.wallet.metamask._provider.on("accountsChanged",KV.wallet._process_session_update);KV.wallet._process_connect(k);c(k)})["catch"](function(k){b(k)})};
KV.wallet.metamask._provider.request(f).then(g)["catch"](function(h){-32602==h.code?(f={method:"wallet_switchEthereumChain",params:[{chainId:"0x"+Number(a).toString(16)}]},KV.wallet.metamask._provider.request(f).then(g)["catch"](b)):b(h)})}else window.web3?(KV.wallet.metamask._web3=window.web3,localStorage.setItem("chainId",a),KV.wallet._process_connect(),c()):(KV.wallet.metamask._provider=new Web3.providers.HttpProvider("http://127.0.0.1:9545"),KV.wallet.metamask._provider.chainId=a,KV.wallet.metamask._web3=
new Web3(KV.wallet.metamask._provider),localStorage.setItem("chainId",a),KV.wallet.metamask._provider.on("disconnect",KV.wallet._process_disconnection),KV.wallet.metamask._provider.on("accountsChanged",KV.wallet._process_session_update),b())})}},readonly:{enable:function(a){return new Promise(function(c,b){KV.wallet.readonly._provider=new Web3.providers.HttpProvider(KV.rpc_url[a]);KV.wallet.readonly._web3=new Web3(KV.wallet.readonly._provider);KV.wallet._process_connect();localStorage.setItem("chainId",
a);c()})}}};KV.wallet.enable=function(a){a||(a=KV.rpc_codes.ETH_MAINNET);return KV.wallet[KV._provider_name].enable(a)};KV.wallet.web3=function(){return KV.wallet[KV._provider_name]._web3};KV.wallet.disconnect=function(){"walletconnect"==KV._provider_name&&KV.wallet.walletconnect._provider.disconnect().then(console.log)["catch"](console.log);KV.wallet.reset_all()};KV.Contract=function(a){this.contract_address=a};
KV.Contract.prototype.load=function(a,c){var b=this;return new Promise(function(d,e){ajax([],{api_url:"string"==typeof a?a:"/rpc-data/"+b.contract_address+".json",method:"GET"}).then(function(f){if(0<c){var g=new Web3.providers.HttpProvider(KV.rpc_url[c]);g=new Web3(g);b.w3contract=new g.eth.Contract(f,b.contract_address)}else g=KV.wallet.web3(),b.w3contract=new g.eth.Contract(f,b.contract_address);d(b)})["catch"](function(f){e(f)})})};
